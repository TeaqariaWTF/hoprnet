--- hoprd_sdk/api_client.orig.py	2024-01-13 23:37:55.152613000 +0100
+++ hoprd_sdk/api_client.py	2024-01-13 23:39:42.562424533 +0100
@@ -17,6 +17,7 @@
 import os
 import re
 import tempfile
+import atexit

 # python 2 and python 3 compatibility library
 import six
@@ -49,90 +50,120 @@
 
     PRIMITIVE_TYPES = (float, bool, bytes, six.text_type) + six.integer_types
     NATIVE_TYPES_MAPPING = {
-        'int': int,
-        'long': int if six.PY3 else long,  # noqa: F821
-        'float': float,
-        'str': str,
-        'bool': bool,
-        'date': datetime.date,
-        'datetime': datetime.datetime,
-        'object': object,
+        "int": int,
+        "long": int if six.PY3 else long,  # noqa: F821
+        "float": float,
+        "str": str,
+        "bool": bool,
+        "date": datetime.date,
+        "datetime": datetime.datetime,
+        "object": object,
     }
+    _pool = None
 
@@ -66,7 +66,7 @@
             configuration = Configuration()
         self.configuration = configuration
 
-        self.pool = ThreadPool()
+        # self.pool = ThreadPool()
         self.rest_client = rest.RESTClientObject(configuration)
         self.default_headers = {}
         if header_name is not None:
@@ -75,9 +75,30 @@
         # Set default User-Agent.
         self.user_agent = 'Swagger-Codegen//python'
 
-    def __del__(self):
-        self.pool.close()
-        self.pool.join()
+    def __enter__(self):
+        return self
+
+    def __exit__(self, exc_type, exc_value, traceback):
+        self.close()
+
+    def close(self):
+        if self._pool:
+            self._pool.close()
+            self._pool.join()
+            self._pool = None
+
+            if hasattr(atexit, "unregister"):
+                atexit.unregister(self.close)
+
+    @property
+    def pool(self):
+        """Create thread pool on first request, avoids instantiating unused threadpool
+        for blocking clients."""
+        if self._pool is None:
+            atexit.register(self.close)
+            self._pool = ThreadPool()
+
+        return self._pool
 
     @property
     def user_agent(self):
