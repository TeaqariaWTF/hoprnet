(function() {var type_impls = {
"core_p2p":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Swarm%3CTBehaviour%3E\" class=\"impl\"><a href=\"#impl-Swarm%3CTBehaviour%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TBehaviour&gt; Swarm&lt;TBehaviour&gt;<div class=\"where\">where\n    TBehaviour: NetworkBehaviour,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(\n    transport: Boxed&lt;(PeerId, StreamMuxerBox)&gt;,\n    behaviour: TBehaviour,\n    local_peer_id: PeerId,\n    config: Config\n) -&gt; Swarm&lt;TBehaviour&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new [<code>Swarm</code>] from the given [<code>Transport</code>], [<code>NetworkBehaviour</code>], [<code>PeerId</code>] and\n[<code>Config</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.network_info\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">network_info</a>(&amp;self) -&gt; NetworkInfo</h4></section></summary><div class=\"docblock\"><p>Returns information about the connections underlying the [<code>Swarm</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.listen_on\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">listen_on</a>(\n    &amp;mut self,\n    addr: Multiaddr\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;ListenerId, TransportError&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Starts listening on the given address.\nReturns an error if the address is not supported.</p>\n<p>Listeners report their new listening addresses as [<code>SwarmEvent::NewListenAddr</code>].\nDepending on the underlying transport, one listener may have multiple listening addresses.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_listener\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_listener</a>(&amp;mut self, listener_id: ListenerId) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Remove some listener.</p>\n<p>Returns <code>true</code> if there was a listener with this ID, <code>false</code>\notherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dial\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">dial</a>(&amp;mut self, opts: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;DialOpts&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, DialError&gt;</h4></section></summary><div class=\"docblock\"><p>Dial a known or unknown peer.</p>\n<p>See also [<code>DialOpts</code>].</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>swarm = build_swarm();\n\n<span class=\"comment\">// Dial a known peer.\n</span>swarm.dial(PeerId::random());\n\n<span class=\"comment\">// Dial an unknown peer.\n</span>swarm.dial(<span class=\"string\">\"/ip6/::1/tcp/12345\"</span>.parse::&lt;Multiaddr&gt;().unwrap());\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.listeners\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">listeners</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;Multiaddr&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator that produces the list of addresses we’re listening on.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.local_peer_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">local_peer_id</a>(&amp;self) -&gt; &amp;PeerId</h4></section></summary><div class=\"docblock\"><p>Returns the peer ID of the swarm passed as parameter.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.external_addresses\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">external_addresses</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;Multiaddr&gt;</h4></section></summary><div class=\"docblock\"><p>List all <strong>confirmed</strong> external address for the local node.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_external_address\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">add_external_address</a>(&amp;mut self, a: Multiaddr)</h4></section></summary><div class=\"docblock\"><p>Add a <strong>confirmed</strong> external address for the local node.</p>\n<p>This function should only be called with addresses that are guaranteed to be reachable.\nThe address is broadcast to all [<code>NetworkBehaviour</code>]s via [<code>FromSwarm::ExternalAddrConfirmed</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_external_address\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_external_address</a>(&amp;mut self, addr: &amp;Multiaddr)</h4></section></summary><div class=\"docblock\"><p>Remove an external address for the local node.</p>\n<p>The address is broadcast to all [<code>NetworkBehaviour</code>]s via [<code>FromSwarm::ExternalAddrExpired</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.disconnect_peer_id\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">disconnect_peer_id</a>(&amp;mut self, peer_id: PeerId) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Disconnects a peer by its peer ID, closing all connections to said peer.</p>\n<p>Returns <code>Ok(())</code> if there was one or more established connections to the peer.</p>\n<p>Closing a connection via [<code>Swarm::disconnect_peer_id</code>] will poll [<code>ConnectionHandler::poll_close</code>] to completion.\nUse this function if you want to close a connection <em>despite</em> it still being in use by one or more handlers.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.close_connection\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">close_connection</a>(&amp;mut self, connection_id: ConnectionId) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Attempt to gracefully close a connection.</p>\n<p>Closing a connection is asynchronous but this function will return immediately.\nA [<code>SwarmEvent::ConnectionClosed</code>] event will be emitted once the connection is actually closed.</p>\n<h5 id=\"returns\"><a class=\"doc-anchor\" href=\"#returns\">§</a>Returns</h5>\n<ul>\n<li><code>true</code> if the connection was established and is now being closed.</li>\n<li><code>false</code> if the connection was not found or is no longer established.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_connected\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_connected</a>(&amp;self, peer_id: &amp;PeerId) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks whether there is an established connection to a peer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.connected_peers\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">connected_peers</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;PeerId&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the currently connected peers.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.behaviour\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">behaviour</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;TBehaviour</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the provided [<code>NetworkBehaviour</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.behaviour_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">behaviour_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut TBehaviour</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the provided [<code>NetworkBehaviour</code>].</p>\n</div></details></div></details>",0,"core_p2p::HoprSwarm"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stream-for-Swarm%3CTBehaviour%3E\" class=\"impl\"><a href=\"#impl-Stream-for-Swarm%3CTBehaviour%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TBehaviour&gt; Stream for Swarm&lt;TBehaviour&gt;<div class=\"where\">where\n    TBehaviour: NetworkBehaviour,</div></h3></section></summary><div class=\"docblock\"><p>Stream of events returned by [<code>Swarm</code>].</p>\n<p>Includes events from the [<code>NetworkBehaviour</code>] as well as events about\nconnection and listener status. See [<code>SwarmEvent</code>] for details.</p>\n<p>Note: This stream is infinite and it is guaranteed that\n[<code>futures::Stream::poll_next</code>] will never return <code>Poll::Ready(None)</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = SwarmEvent&lt;&lt;TBehaviour as NetworkBehaviour&gt;::ToSwarm&gt;</h4></section></summary><div class='docblock'>Values yielded by the stream.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_next\" class=\"method trait-impl\"><a href=\"#method.poll_next\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_next</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut Swarm&lt;TBehaviour&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;Swarm&lt;TBehaviour&gt; as Stream&gt;::Item&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to pull out the next value of this stream, registering the\ncurrent task for wakeup if the value is not yet available, and returning\n<code>None</code> if the stream is exhausted. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class='docblock'>Returns the bounds on the remaining length of the stream. <a>Read more</a></div></details></div></details>","Stream","core_p2p::HoprSwarm"],["<section id=\"impl-Unpin-for-Swarm%3CTBehaviour%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Swarm%3CTBehaviour%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TBehaviour&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> for Swarm&lt;TBehaviour&gt;<div class=\"where\">where\n    TBehaviour: NetworkBehaviour,</div></h3></section>","Unpin","core_p2p::HoprSwarm"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FusedStream-for-Swarm%3CTBehaviour%3E\" class=\"impl\"><a href=\"#impl-FusedStream-for-Swarm%3CTBehaviour%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TBehaviour&gt; FusedStream for Swarm&lt;TBehaviour&gt;<div class=\"where\">where\n    TBehaviour: NetworkBehaviour,</div></h3></section></summary><div class=\"docblock\"><p>The stream of swarm events never terminates, so we can implement fused for it.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_terminated\" class=\"method trait-impl\"><a href=\"#method.is_terminated\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_terminated</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the stream should no longer be polled.</div></details></div></details>","FusedStream","core_p2p::HoprSwarm"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()